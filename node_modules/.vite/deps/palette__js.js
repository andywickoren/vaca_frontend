// node_modules/palette.js/palette.js
var Palette = function() {
  var define = Object.defineProperty;
  var describe = Object.getOwnPropertyDescriptor;
  var forEach = [].forEach;
  function forIn(iter, bind) {
    for (var i in this)
      if (this.hasOwnProperty(i))
        iter.call(bind, this[i], i, this);
  }
  function each(obj, iter, bind) {
    if (obj)
      ("length" in obj && typeof obj.length === "number" ? forEach : forIn).call(obj, iter, bind = bind || obj);
    return bind;
  }
  function set(obj, props, exclude) {
    for (var key2 in props)
      if (props.hasOwnProperty(key2) && !(exclude && exclude[key2])) {
        obj[key2] = props[key2];
      }
    return obj;
  }
  function merge() {
    var res = {};
    each(arguments, function(obj) {
      for (key in obj) {
        define(res, key, describe(obj, key));
      }
    });
    return res;
  }
  function pick(a, b) {
    return a === void 0 ? b : a;
  }
  function isPlainObject(obj) {
    return obj && obj.constructor === Object;
  }
  var Element = new function() {
    var special = /^(checked|value|selected|disabled)$/i;
    var translated = { text: "textContent", html: "innerHTML" };
    function create(nodes, parent) {
      var res = [];
      for (var i = 0, l = nodes && nodes.length; i < l; ) {
        var el = nodes[i++];
        if (typeof el === "string") {
          el = document.createElement(el);
        } else if (!el || !el.nodeType) {
          continue;
        }
        if (isPlainObject(nodes[i]))
          Element.set(el, nodes[i++]);
        if (Array.isArray(nodes[i]))
          create(nodes[i++], el);
        if (parent)
          parent.appendChild(el);
        res.push(el);
      }
      return res;
    }
    return (
      /** @lends Element */
      {
        create: function(nodes, parent) {
          var isArray = Array.isArray(nodes);
          var res = create(
            isArray ? nodes : arguments,
            isArray ? parent : null
          );
          return res.length === 1 ? res[0] : res;
        },
        find: function(selector, root) {
          return (root || document).querySelector(selector);
        },
        get: function(el, key2) {
          return el ? special.test(key2) ? key2 === "value" || typeof el[key2] !== "string" ? el[key2] : true : key2 in translated ? el[translated[key2]] : el.getAttribute(key2) : null;
        },
        set: function(el, key2, value) {
          if (typeof key2 !== "string") {
            for (var name in key2)
              if (key2.hasOwnProperty(name))
                Element.set(el, name, key2[name]);
          } else if (!el || value == null) {
            return el;
          } else if (special.test(key2)) {
            el[key2] = value;
          } else if (key2 in translated) {
            el[translated[key2]] = value;
          } else if (key2 === "events") {
            for (var type in value)
              el.addEventListener(type, value[type], false);
          } else {
            el.setAttribute(key2, value);
          }
          return el;
        },
        hasClass: function(el, cls) {
          return el && new RegExp("\\s*" + cls + "\\s*").test(el.className);
        },
        addClass: function(el, cls) {
          if (el && !Element.hasClass(el, cls)) {
            el.className = (el.className + " " + cls).trim();
          }
        },
        removeClass: function(el, cls) {
          if (el) {
            el.className = el.className.replace(
              new RegExp("\\s*" + cls + "\\s*", "g"),
              " "
            ).trim();
          }
        },
        toggleClass: function(el, cls, state) {
          Element[(state === void 0 ? !Element.hasClass(el, cls) : state) ? "addClass" : "removeClass"](el, cls);
        },
        remove: function(el) {
          if (el.parentNode)
            el.parentNode.removeChild(el);
        },
        addChild: function(el, child) {
          return create(child, el)[0];
        },
        addChildren: function(el, children) {
          return create(children, el);
        },
        removeChildren: function(el) {
          while (el.firstChild)
            el.removeChild(el.firstChild);
        },
        insertBefore: function(ref, el) {
          return ref.parentNode.insertBefore(create(el)[0], ref);
        }
      }
    );
  }();
  function Emitter() {
    return each(arguments, function(key2) {
      var type = key2.substring(2).toLowerCase();
      var name = "_" + key2;
      define(this, key2, {
        enumerable: true,
        configurable: true,
        get: function() {
          return this[name];
        },
        set: function(func) {
          var prev = this[name];
          if (prev)
            this.off(type, prev);
          if (func)
            this.on(type, func);
          this[name] = func;
        }
      });
    }, {
      on: function(type, func) {
        var handlers = this._callbacks = this._callbacks || {};
        handlers = handlers[type] = handlers[type] || [];
        if (handlers.indexOf(func) === -1) {
          handlers.push(func);
        }
      },
      off: function(type, func) {
        var handlers = this._callbacks && this._callbacks[type];
        if (handlers) {
          var index;
          if (!func || (index = handlers.indexOf(func)) !== -1 && handlers.length === 1) {
            delete this._callbacks[type];
          } else if (index !== -1) {
            handlers.splice(index, 1);
          }
        }
      },
      emit: function(type) {
        var handlers = this._callbacks && this._callbacks[type];
        if (!handlers)
          return false;
        var args = [].slice.call(arguments, 1);
        for (var i = 0, l = handlers.length; i < l; i++) {
          if (handlers[i].apply(this, args) === false)
            break;
        }
        return true;
      }
    });
  }
  function Palette2(props) {
    this._id = Palette2._id = (Palette2._id || 0) + 1;
    if (!isPlainObject(props)) {
      var args = arguments;
      props = { title: args[0], components: args[1], values: args[2] };
    }
    var components = this._components = props.components;
    var title = props.title;
    var name = this._name = props.name || (title ? title.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/\W/g, "_").toLowerCase() : "palette-" + this._id);
    this._values = props.values || {};
    var root = this._root = new Component(
      this,
      null,
      "root",
      components,
      this._values
    );
    set(components, root._components);
    var parent = props.parent || Element.find(".palettejs-root") || Element.addChild(
      Element.find("body"),
      ["div", { class: "palettejs-root" }]
    );
    this._element = Element.addChild(parent, ["div", {
      class: "palettejs-palette" + root._classes,
      id: "palettejs-palette-" + name
    }, [root._table]]);
    set(this, props, { components: true, values: true, parent: true });
    Palette2.instances.push(this);
    Palette2.instances[name] = this;
  }
  Palette2.prototype = merge(
    Emitter("onChange"),
    /** @lends Palette# */
    {
      // DOCS: Palette#initialize(props)
      // DOCS: Palette#initialize(title, components, values)
      // DOCS: Palette#components
      // DOCS: Palette#values
      // DOCS: Palette#remove()
      get name() {
        return this._name;
      },
      get title() {
        return this._root.title;
      },
      set title(title) {
        this._root.title = title;
      },
      get element() {
        return this._element;
      },
      get components() {
        return this._components;
      },
      get values() {
        return this._values;
      },
      get enabled() {
        return this._root.enabled;
      },
      set enabled(enabled) {
        this._root._setEnabled(enabled, true);
      },
      /**
       * Resets the values of the components to their
       * {@link Component#defaultValue}.
       */
      reset: function() {
        this._root.reset();
      },
      remove: function() {
        Element.remove(this._element);
        var instances = Palette2.instances;
        var index = instances.indexOf(this);
        var remove = index !== -1;
        if (remove) {
          instances.splice(index, 1);
          delete instances[this._id];
        }
        return remove;
      },
      toString: function() {
        return "Palette " + this._name || "@" + this._id;
      }
    }
  );
  Palette2.instances = [];
  Palette2.get = function(nameOrElement) {
    if (typeof nameOrElement === "object") {
      while (nameOrElement && !Element.hasClass(
        nameOrElement,
        "palettejs-palette"
      ))
        nameOrElement = nameOrElement.parentNode;
      nameOrElement = (Element.get(nameOrElement, "id").match(/^palettejs-palette-(.*)$/) || [])[1];
    }
    return Palette2.instances[nameOrElement];
  };
  Palette2.components = {
    "boolean": {
      type: "checkbox",
      value: "checked"
    },
    string: {
      tag: function(props) {
        return props.rows === void 0 ? "input" : "textarea";
      },
      type: "text"
    },
    number: {
      type: "number",
      number: true
    },
    button: {
      type: "button",
      tag: "button",
      value: "text"
    },
    text: {
      tag: "span",
      value: "text"
    },
    color: {
      type: "color"
    },
    slider: {
      type: "range",
      number: true
    },
    ruler: {
      tag: "hr"
    },
    progress: {
      tag: "progress"
    },
    html: {
      tag: "div",
      value: "html"
    },
    list: {
      tag: "select",
      setOptions: function() {
        Element.removeChildren(this._element);
        Element.addChildren(
          this._element,
          each(this._options, function(option) {
            this.push("option", { value: option, text: option });
          }, [])
        );
      }
    }
  };
  function Component(palette, parent, name, props, values, row) {
    if (!name)
      name = "component-" + this._id;
    var value = pick(values[name], props.value);
    this._id = Component._id = (Component._id || 0) + 1;
    this._palette = palette;
    this._parent = parent;
    this._name = name;
    this._row = row;
    var type = this._type = props.type in Palette2.components ? props.type : Array.isArray(props.options) ? "list" : typeof props.onClick === "function" ? "button" : value !== void 0 ? typeof value : void 0;
    var meta = this._meta = Palette2.components[type] || { type };
    var element;
    var classes;
    if (row) {
      this._labelCell = Element.addChild(row, ["td", {
        class: "palettejs-label",
        id: "palettejs-label-" + name
      }]);
      if (parent)
        parent._numCells++;
    }
    if (!type) {
      var layout = props.layout || "rows";
      var is = {};
      is[layout] = true;
      var table = this._table = is.horizontal || !(is.columns && row) ? Element.create(
        "table",
        { class: "palettejs-pane" },
        ["tbody"]
      ) : null;
      if (is.horizontal)
        is.columns = true;
      var tbody = this._tbody = table && table.firstChild;
      var components = this._components = {};
      var currentRow = !table && row;
      var numCells = 0;
      element = table;
      classes = " palettejs-layout palettejs-layout-" + layout;
      this._numCells = 0;
      for (var key2 in props) {
        var component = props[key2];
        if (isPlainObject(component)) {
          if (table && !(is.columns && currentRow)) {
            currentRow = Element.addChild(tbody, ["tr", {
              class: "palettejs-row",
              id: "palettejs-row-" + key2
            }]);
            if (is.columns)
              this._row = currentRow;
          }
          component = components[key2] = new Component(
            palette,
            this,
            key2,
            component,
            values,
            currentRow
          );
          if (!(key2 in palette._components))
            palette._components[key2] = component;
          numCells = Math.max(numCells, this._numCells);
          if (!is.columns)
            this._numCells = 0;
          delete props[key2];
        }
      }
      this._numCells = numCells;
      if (is.columns && parent)
        parent._numCells = numCells;
      each(components, function(component2, key3) {
        if (numCells > 2 && component2._cell && !is.columns)
          Element.set(component2._cell, "colspan", numCells);
        if (key3 in values) {
          delete values[key3];
          define(values, key3, {
            enumerable: true,
            configurable: true,
            get: function() {
              return component2.value;
            },
            set: function(val) {
              component2.value = val;
            }
          });
        }
      });
      set(this, components);
    } else {
      var that = this;
      var tag = typeof meta.tag === "function" ? meta.tag.call(this, props) : meta.tag || "input";
      this._labelId = /^(input|textarea)$/.test(tag) ? "palettejs-input-" + name : null;
      element = this._element = Element.create(tag, {
        id: this._labelId,
        type: meta.type,
        events: {
          change: function() {
            that.value = Element.get(this, meta.value || "value");
          },
          click: function() {
            that.emit("click");
          }
        }
      });
      classes = " palettejs-type-" + type;
    }
    if (element) {
      this._cell = Element.addChild(row, [
        "td",
        {
          class: "palettejs-component" + classes,
          id: "palettejs-component-" + name
        },
        [element]
      ]);
      if (parent)
        parent._numCells++;
    }
    this._classes = classes;
    this.on("change", function(value2) {
      if (this._emit)
        palette.emit("change", this, this._name, value2);
    });
    this._emit = false;
    set(this, props, { name: true, value: true });
    this._defaultValue = this.value = value;
    if (meta.create)
      meta.create.call(this);
    this._emit = true;
  }
  Component.prototype = merge(
    Emitter("onChange", "onClick"),
    each(
      [
        "type",
        "name",
        "title",
        "palette",
        "parent",
        "element",
        "label",
        "suffix",
        "options",
        "visible",
        "enabled"
      ],
      // Inject getters for all properties that simply redirect to the 'hidden'
      // property that is prefixed with '_'.
      function(key2) {
        var name = "_" + key2;
        define(this, key2, {
          enumerable: true,
          configurable: true,
          get: function() {
            return this[name];
          }
        });
      },
      /** @lends Component# */
      {
        // DOCS: All!
        // Default values for internals
        _visible: true,
        _enabled: true,
        set title(title) {
          this._title = title;
          if (this._tbody) {
            var node = this._titleNode;
            if (!node && title) {
              node = this._titleNode = Element.insertBefore(this._tbody, [
                "caption",
                ["span"]
              ]).firstChild;
            } else if (node && !title) {
              Element.remove(node);
            }
            Element.set(node, "text", title);
          }
        },
        get value() {
          var value = this._value, getValue = this._meta.getValue;
          return getValue ? getValue.call(this, value) : value;
        },
        set value(value) {
          if (this._components)
            return;
          var meta = this._meta;
          var key2 = meta.value || "value";
          var setValue = meta.setValue;
          if (setValue)
            value = setValue.call(this, value);
          if (value !== void 0) {
            Element.set(this._element, key2, value);
            value = Element.get(this._element, key2);
          }
          if (meta.number)
            value = parseFloat(value, 10);
          if (this._value !== value) {
            this._value = value;
            if (this._emit)
              this.emit("change", this.value);
          }
        },
        // Setup #text as an alias to #value, for better semantics when creating
        // buttons.
        get text() {
          return this.value;
        },
        set text(text) {
          this.value = text;
        },
        _setLabel: function(label, nodeName, parent) {
          if (parent) {
            this[nodeName] = Element.set(
              this[nodeName] || Element.addChild(
                parent,
                ["label", { "for": this._labelId }]
              ),
              "text",
              label
            );
          }
        },
        set label(label) {
          this._label = label;
          this._setLabel(label, "_labelNode", this._labelCell);
        },
        set suffix(suffix) {
          this._suffix = suffix;
          this._setLabel(suffix, "_suffixNode", this._cell);
        },
        set options(options) {
          this._options = options;
          var setOptions = this._meta.setOptions;
          if (setOptions)
            setOptions.call(this);
        },
        set visible(visible) {
          Element.toggleClass(this._cell || this._row, "hidden", !visible);
          Element.toggleClass(this._labelCell, "hidden", !visible);
          var setVisible = this._meta.setVisible;
          if (setVisible)
            setVisible.call(this, visible);
          this._visible = !!visible;
        },
        _setEnabled: function(enabled, _fromParent) {
          if (!enabled ^ this._enabled)
            return;
          if (_fromParent) {
            var prev = pick(this._previousEnabled, this._enabled);
            this._previousEnabled = enabled ? void 0 : prev;
            enabled = enabled && prev;
          }
          Element.toggleClass(this._cell || this._row, "disabled", !enabled);
          if (this._components) {
            for (var i in this._components)
              this._components[i]._setEnabled(enabled, true);
          } else {
            Element.set(this._element, "disabled", !enabled);
            var setEnabled = this._meta.setEnabled;
            if (setEnabled)
              setEnabled.call(this, enabled);
          }
          this._enabled = !!enabled;
        },
        set enabled(enabled) {
          this._setEnabled(enabled);
        },
        get range() {
          return [this._min, this._max];
        },
        set range(range) {
          this.min = range ? range[0] : null;
          this.max = range ? range[1] : null;
        },
        reset: function() {
          if (this._components) {
            for (var i in this._components)
              this._components[i].reset();
          } else {
            this.value = this._defaultValue;
          }
        },
        toString: function() {
          return "Component " + this._name || "@" + this._id;
        }
      }
    ),
    each(
      ["min", "max", "step", "rows", "readonly", "placeholder"],
      // Inject getters and setters for all properties that simply redirect to the
      // underlying HTML element.
      function(key2) {
        var name = "_" + key2;
        define(this, key2, {
          enumerable: true,
          configurable: true,
          get: function() {
            return this[name];
          },
          set: function(value) {
            this[name] = value;
            Element.set(this._element, key2, value);
          }
        });
      },
      {}
    )
  );
  return Palette2;
}();
//# sourceMappingURL=palette__js.js.map
