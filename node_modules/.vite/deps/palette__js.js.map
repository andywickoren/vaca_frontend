{
  "version": 3,
  "sources": ["../../palette.js/palette.js"],
  "sourcesContent": ["/*\n * Palette.js - Insert Elevator Pitch Here.\n *\n * Copyright (c) 2011 - 2016, Juerg Lehni\n * http://scratchdisk.com/\n *\n * Distributed under the MIT license. See LICENSE file for details.\n *\n * All rights reserved.\n */\n\n// TODO: Sort out UMD & co:\nvar Palette = function() {\n\n// From straps.js, inlined here:\nvar define = Object.defineProperty;\nvar describe = Object.getOwnPropertyDescriptor;\nvar forEach = [].forEach;\n\nfunction forIn(iter, bind) {\n    for (var i in this)\n        if (this.hasOwnProperty(i))\n            iter.call(bind, this[i], i, this);\n}\n\nfunction each(obj, iter, bind) {\n    if (obj)\n        ('length' in obj && typeof obj.length === 'number'\n            ? forEach\n            : forIn).call(obj, iter, bind = bind || obj);\n    return bind;\n}\n\nfunction set(obj, props, exclude) {\n    for (var key in props)\n        if (props.hasOwnProperty(key) && !(exclude && exclude[key])) {\n            obj[key] = props[key];\n    }\n    return obj;\n}\n\nfunction merge() {\n    // Use Object.defineProperty so we can merge getters / setters too.\n    var res = {};\n    each(arguments, function(obj) {\n        for (key in obj) {\n            define(res, key, describe(obj, key));\n        }\n    })\n    return res;\n}\n\nfunction pick(a, b) {\n    return a === undefined ? b : a;\n}\n\nfunction isPlainObject(obj) {\n    return obj && obj.constructor === Object;\n}\n\n /**\n * @name Element\n * @namespace\n * @private\n */\nvar Element = new function() {\n    // We use a mix of Bootstrap.js legacy and Bonzo.js magic, ported over and\n    // further simplified to a subset actually required by Palette.js\n    var special = /^(checked|value|selected|disabled)$/i;\n    var translated = { text: 'textContent', html: 'innerHTML' };\n\n    function create(nodes, parent) {\n        var res = [];\n        for (var i =  0, l = nodes && nodes.length; i < l;) {\n            var el = nodes[i++];\n            if (typeof el === 'string') {\n                el = document.createElement(el);\n            } else if (!el || !el.nodeType) {\n                continue;\n            }\n            // Do we have attributes?\n            if (isPlainObject(nodes[i]))\n                Element.set(el, nodes[i++]);\n            // Do we have children?\n            if (Array.isArray(nodes[i]))\n                create(nodes[i++], el);\n            // Are we adding to a parent?\n            if (parent)\n                parent.appendChild(el);\n            res.push(el);\n        }\n        return res;\n    }\n\n    return /** @lends Element */{\n        create: function(nodes, parent) {\n            var isArray = Array.isArray(nodes);\n            var res = create(isArray ? nodes : arguments,\n                        isArray ? parent : null);\n            return res.length === 1 ? res[0] : res;\n        },\n\n        find: function(selector, root) {\n            return (root || document).querySelector(selector);\n        },\n\n        get: function(el, key) {\n            return el\n                ? special.test(key)\n                    ? key === 'value' || typeof el[key] !== 'string'\n                        ? el[key]\n                        : true\n                    : key in translated\n                        ? el[translated[key]]\n                        : el.getAttribute(key)\n                : null;\n        },\n\n        set: function(el, key, value) {\n            if (typeof key !== 'string') {\n                for (var name in key)\n                    if (key.hasOwnProperty(name))\n                        Element.set(el, name, key[name]);\n            } else if (!el || value == null) {\n                return el;\n            } else if (special.test(key)) {\n                el[key] = value;\n            } else if (key in translated) {\n                el[translated[key]] = value;\n            } else if (key === 'events') {\n                for (var type in value)\n                    el.addEventListener(type, value[type], false);\n            } else {\n                el.setAttribute(key, value);\n            }\n            return el;\n        },\n\n        hasClass: function(el, cls) {\n            return el && new RegExp('\\\\s*' + cls + '\\\\s*').test(el.className);\n        },\n\n        addClass: function(el, cls) {\n            if (el && !Element.hasClass(el, cls)) {\n                el.className = (el.className + ' ' + cls).trim();\n            }\n        },\n\n        removeClass: function(el, cls) {\n            if (el) {\n                el.className = el.className.replace(\n                    new RegExp('\\\\s*' + cls + '\\\\s*', 'g'), ' ').trim();\n            }\n        },\n\n        toggleClass: function(el, cls, state) {\n            Element[(state === undefined ? !Element.hasClass(el, cls)\n                    : state) ? 'addClass' : 'removeClass'](el, cls);\n        },\n\n        remove: function(el) {\n            if (el.parentNode)\n                el.parentNode.removeChild(el);\n        },\n\n        addChild: function(el, child) {\n            return create(child, el)[0];\n        },\n\n        addChildren: function(el, children) {\n            // We can use the create() function for this too!\n            return create(children, el);\n        },\n\n        removeChildren: function(el) {\n            while (el.firstChild)\n                el.removeChild(el.firstChild);\n        },\n\n        insertBefore: function(ref, el) {\n            return ref.parentNode.insertBefore(create(el)[0], ref);\n        }\n    };\n};\n\n/**\n * @name Emitter\n * @private\n */\nfunction Emitter() {\n    // Returns a mixin object that contains three Emitter methods #on(), #off()\n    // and #emit(), as well as getters & setters defined for all event\n    // properties listed in the arguments, in a way that #onClick automatically\n    // delegates to #on('click').\n    return each(arguments, function(key) {\n        var type = key.substring(2).toLowerCase();\n        var name = '_' + key; \n        define(this, key, {\n            enumerable: true,\n            configurable: true,\n            get: function() {\n                return this[name];\n            },\n            set: function(func) {\n                // Detach the previous event, if there was one.\n                var prev = this[name];\n                if (prev)\n                    this.off(type, prev);\n                if (func)\n                    this.on(type, func);\n                this[name] = func;\n            }\n        });\n    }, {\n        on: function(type, func) {\n            var handlers = this._callbacks = this._callbacks || {};\n            handlers = handlers[type] = handlers[type] || [];\n            if (handlers.indexOf(func) === -1) {\n                handlers.push(func);\n            }\n        },\n\n        off: function(type, func) {\n            var handlers = this._callbacks && this._callbacks[type];\n            if (handlers) {\n                // See if this is the last handler that we're detaching (or if\n                // we are detaching all handlers).\n                var index;\n                if (!func || (index = handlers.indexOf(func)) !== -1\n                        && handlers.length === 1) {\n                    delete this._callbacks[type];\n                } else if (index !== -1) {\n                    handlers.splice(index, 1);\n                }\n            }\n        },\n\n        emit: function(type) {\n            // Returns true if emitted, false otherwise\n            var handlers = this._callbacks && this._callbacks[type];\n            if (!handlers)\n                return false;\n            var args = [].slice.call(arguments, 1);\n            for (var i = 0, l = handlers.length; i < l; i++) {\n                if (handlers[i].apply(this, args) === false)\n                    break;\n            }\n            return true;\n        }\n    });\n}\n\n/**\n * @name Palette\n * @class\n */\nfunction Palette(props) {\n    this._id = Palette._id = (Palette._id || 0) + 1;\n    // Support legacy constructor(title, components, values)\n    if (!isPlainObject(props)) {\n        var args = arguments;\n        props = { title: args[0], components: args[1], values: args[2] };\n    }\n    var components = this._components = props.components;\n    var title = props.title;\n    var name = this._name = props.name || (title\n            // Hyphenate with '-' and replace non-word characters with '_'.\n            ? title.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\\W/g, '_')\n                .toLowerCase()\n            : 'palette-' + this._id);\n    this._values = props.values || {};\n    // Create one root component that handles the layout and contains all\n    // the components.\n    var root = this._root = new Component(this, null, 'root', components,\n            this._values);\n    // Write the created components back into the passed components object,\n    // so they are exposed and can easily be accessed from the outside.\n    set(components, root._components);\n    var parent = props.parent\n            || Element.find('.palettejs-root')\n            || Element.addChild(Element.find('body'),\n                ['div', { class: 'palettejs-root' }]);\n    this._element = Element.addChild(parent, ['div', {\n                class: 'palettejs-palette' + root._classes,\n                id: 'palettejs-palette-' + name\n            }, [root._table]]);\n    set(this, props, { components: true, values: true, parent: true });\n    Palette.instances.push(this);\n    Palette.instances[name] = this;\n}\n\nPalette.prototype = merge(Emitter('onChange'), /** @lends Palette# */{\n    // DOCS: Palette#initialize(props)\n    // DOCS: Palette#initialize(title, components, values)\n    // DOCS: Palette#components\n    // DOCS: Palette#values\n    // DOCS: Palette#remove()\n\n    get name() {\n        return this._name;\n    },\n\n    get title() {\n        return this._root.title;\n    },\n\n    set title(title) {\n        this._root.title = title;\n    },\n\n    get element() {\n        return this._element;\n    },\n\n    get components() {\n        return this._components;\n    },\n\n    get values() {\n        return this._values;\n    },\n\n    get enabled() {\n        return this._root.enabled;\n    },\n\n    set enabled(enabled) {\n        this._root._setEnabled(enabled, true);\n    },\n\n    /**\n     * Resets the values of the components to their\n     * {@link Component#defaultValue}.\n     */\n    reset: function() {\n        this._root.reset();\n    },\n\n    remove: function() {\n        Element.remove(this._element);\n        var instances = Palette.instances;\n        var index = instances.indexOf(this);\n        var remove = index !== -1;\n        if (remove) {\n            instances.splice(index, 1);\n            delete instances[this._id];\n        }\n        return remove;\n    },\n\n    toString: function() {\n        return 'Palette ' + this._name || '@' + this._id;\n    }\n});\n\nPalette.instances = [];\n\nPalette.get = function(nameOrElement) {\n    if (typeof nameOrElement === 'object') {\n        // Support child elements by walking up the parents of the\n        // element until the palette element is found.\n        while (nameOrElement && !Element.hasClass(nameOrElement,\n                'palettejs-palette'))\n            nameOrElement = nameOrElement.parentNode;\n        nameOrElement = (Element.get(nameOrElement, 'id')\n                .match(/^palettejs-palette-(.*)$/) || [])[1];\n    }\n    return Palette.instances[nameOrElement];\n};\n\n// Component meta-information, by type.\n// This is stored in #_meta on the components.\nPalette.components = {\n    'boolean': {\n        type: 'checkbox',\n        value: 'checked'\n    },\n\n    string: {\n        tag: function(props) {\n            // Use a textarea for multiline items (when #rows is defined).\n            return props.rows === undefined ? 'input' : 'textarea';\n        },\n        type: 'text'\n    },\n\n    number: {\n        type: 'number',\n        number: true\n    },\n\n    button: {\n        type: 'button',\n        tag: 'button',\n        value: 'text'\n    },\n\n    text: {\n        tag: 'span',\n        value: 'text'\n    },\n\n    color: {\n        type: 'color'\n    },\n\n    slider: {\n        type: 'range',\n        number: true\n    },\n\n    ruler: {\n        tag: 'hr'\n    },\n\n    progress: {\n        tag: 'progress'\n    },\n\n    html: {\n        tag: 'div',\n        value: 'html'\n    },\n\n    list: {\n        tag: 'select',\n\n        setOptions: function() {\n            Element.removeChildren(this._element);\n            Element.addChildren(this._element,\n                each(this._options, function(option) {\n                    this.push('option', { value: option, text: option });\n                }, []));\n        }\n    }\n}\n\n/**\n * @name Component\n * @class\n */\nfunction Component(palette, parent, name, props, values, row) {\n    if (!name)\n        name = 'component-' + this._id;\n    var value = pick(values[name], props.value);\n    this._id = Component._id = (Component._id || 0) + 1;\n    this._palette = palette;\n    this._parent = parent;\n    this._name = name;\n    // The row within which this component is contained. This can be a shared\n    // row, e.g. when the parent component has a columns layout.\n    this._row = row;\n    var type = this._type = props.type in Palette.components\n            ? props.type\n            : Array.isArray(props.options)\n                ? 'list'\n                : typeof props.onClick === 'function'\n                    ? 'button'\n                    : value !== undefined\n                        ? typeof value\n                        : undefined;\n    var meta = this._meta = Palette.components[type] || { type: type };\n    var element;\n    var classes;\n    if (row) {\n        this._labelCell = Element.addChild(row, ['td', {\n            class: 'palettejs-label',\n            id: 'palettejs-label-' + name\n        }]);\n        // We just added one cell to the row:\n        if (parent)\n            parent._numCells++;\n    }\n    if (!type) {\n        // No type defined, so we're dealing with a layout component that\n        // contains nested child components. See if they are to be aligned as\n        // columns or rows, and lay things out accordingly.\n        // There are three possible types: 'rows', 'columns', 'horizontal'.\n        // With 'rows' and 'columns' you make the child components a part of the\n        // same parent table, so they are laid out in a grid, and their sizes\n        // affect each other's positioning.\n        // 'horizontal' is the same as 'columns' but the components get added to\n        // their own separate table, thus only a s whole affecting the parent\n        // table.\n        var layout = props.layout || 'rows';\n        var is = {};\n        is[layout]= true;\n        // On the root element, we need to create the table and row even if it's\n        // a columns layout.\n        var table = this._table = (is.horizontal || !(is.columns && row))\n                ? Element.create('table', { class: 'palettejs-pane' },\n                    ['tbody'])\n                : null;\n        if (is.horizontal)\n            is.columns = true;\n        var tbody = this._tbody = table && table.firstChild;\n        var components = this._components = {};\n        // Only use current row if no new table is inserted\n        var currentRow = !table && row;\n        var numCells = 0;\n        element = table;\n        classes = ' palettejs-layout palettejs-layout-' + layout;\n        this._numCells = 0;\n        for (var key in props) {\n            var component = props[key];\n            if (isPlainObject(component)) {\n                // Create the rows for vertical elements, as well as columns\n                // root elements.\n                if (table && !(is.columns && currentRow)) {\n                    currentRow = Element.addChild(tbody, ['tr', {\n                        class: 'palettejs-row',\n                        id: 'palettejs-row-' + key\n                    }]);\n                    // Set _row for the columns root element.\n                    if (is.columns)\n                        this._row = currentRow;\n                }\n                component = components[key] = new Component(\n                        palette, this, key, component, values, currentRow);\n                // Also expose nested components through Palette#components, but\n                // only if there isn't already another component with the same\n                // name defined already.\n                if (!(key in palette._components))\n                    palette._components[key] = component;\n                // Keep track of the maximum amount of cells per row, so we can\n                // adjust colspan after.\n                numCells = Math.max(numCells, this._numCells);\n                // Do not reset cell counter if all components go to the\n                // same parent row.\n                if (!is.columns)\n                    this._numCells = 0;\n                // Remove the entry now from the object that was provided to\n                // create the component since the leftovers will be injected\n                // into the created component through #_set() below.\n                delete props[key];\n            }\n        }\n        this._numCells = numCells;\n        // If aligning things horizontally, we need to tell the parent how\n        // many cells there are all together.\n        if (is.columns && parent)\n            parent._numCells = numCells;\n        each(components, function(component, key) {\n            // NOTE: Components with columns layout won't have their _cell set.\n            if (numCells > 2 && component._cell && !is.columns)\n                Element.set(component._cell, 'colspan', numCells);\n            // Replace each entry in values with getters/setters so we can\n            // directly link the value to the component and observe change.\n            if (key in values) {\n                delete values[key];\n                define(values, key, {\n                    enumerable: true,\n                    configurable: true,\n                    get: function() {\n                        return component.value;\n                    },\n                    set: function(val) {\n                        component.value = val;\n                    }\n                });\n            }\n        });\n        // Add child components directly to this component, so we can access\n        // them through the same path as in the components object literal that\n        // was passed.\n        set(this, components);\n    } else {\n        var that = this;\n        var tag = typeof meta.tag === 'function'\n                ?  meta.tag.call(this, props)\n                :  meta.tag || 'input';\n        this._labelId = /^(input|textarea)$/.test(tag)\n                ? 'palettejs-input-' + name : null;\n        element = this._element = Element.create(tag, {\n            id: this._labelId,\n            type: meta.type,\n            events: {\n                change: function() {\n                    that.value = Element.get(this, meta.value || 'value');\n                },\n                click: function() {\n                    that.emit('click');\n                }\n            }\n        });\n        classes = ' palettejs-type-' + type;\n    }\n    if (element) {\n        this._cell = Element.addChild(row, ['td', {\n                class: 'palettejs-component' + classes,\n                id: 'palettejs-component-' + name\n            }, [element]\n        ]);\n        if (parent)\n            parent._numCells++;\n    }\n    this._classes = classes;\n    // Attach default 'change' even that delegates to the palette.\n    this.on('change', function(value) {\n        if (this._emit)\n            palette.emit('change', this, this._name, value);\n    });\n    // Now that everything is set up, copy over values fro, props.\n    // NOTE: This triggers setters, which is why we set _emit = false, and why\n    // we can only call this after everything else is set up (e.g. set label() \n    // requires this._labelCell).\n    this._emit = false;\n    // Exclude name because it's already set, and value since we want to set\n    // it after range.\n    set(this, props, { name: true, value: true });\n    this._defaultValue = this.value = value;\n    if (meta.create)\n        meta.create.call(this);\n    // Start firing change events after we have initialized.\n    this._emit = true;\n}\n\nComponent.prototype = merge(Emitter('onChange', 'onClick'),\neach(['type', 'name', 'title', 'palette', 'parent', 'element', 'label',\n        'suffix', 'options', 'visible', 'enabled'],\n    // Inject getters for all properties that simply redirect to the 'hidden'\n    // property that is prefixed with '_'.\n    function(key) {\n        var name = '_' + key;\n        define(this, key, {\n            enumerable: true,\n            configurable: true,\n            get: function() {\n                return this[name];\n            }\n        });\n    },\n/** @lends Component# */{\n    // DOCS: All!\n\n    // Default values for internals\n    _visible: true,\n    _enabled: true,\n\n    set title(title) {\n        this._title = title;\n        if (this._tbody) {\n            var node = this._titleNode;\n            if (!node && title) {\n                // Create a caption tag, and nest the title in a span inside,\n                // so we can offer some more flexibility with CSS on it.\n                node = this._titleNode = Element.insertBefore(this._tbody, [\n                        'caption', [ 'span' ],\n                    ]).firstChild;\n            } else if (node && !title) {\n                Element.remove(node);\n            }\n            Element.set(node, 'text', title);\n        }\n    },\n\n    get value() {\n        var value = this._value,\n            getValue = this._meta.getValue;\n        return getValue ? getValue.call(this, value) : value;\n    },\n\n    set value(value) {\n        if (this._components)\n            return;\n        var meta = this._meta;\n        var key = meta.value || 'value';\n        var setValue = meta.setValue;\n        if (setValue)\n            value = setValue.call(this, value);\n        // If setValue doesn't return a value, then we assume it took care of\n        // the setting by itself.\n        if (value !== undefined) {\n            Element.set(this._element, key, value);\n            // Read back and convert from input again to make sure we're in sync\n            value = Element.get(this._element, key);\n        }\n        if (meta.number)\n            value = parseFloat(value, 10);\n        if (this._value !== value) {\n            this._value = value;\n            if (this._emit)\n                this.emit('change', this.value);\n        }\n    },\n\n    // Setup #text as an alias to #value, for better semantics when creating\n    // buttons.\n    get text() {\n        return this.value;\n    },\n\n    set text(text) {\n        this.value = text;\n    },\n\n    _setLabel: function(label, nodeName, parent) {\n        if (parent) {\n            this[nodeName] = Element.set(this[nodeName]\n                    || Element.addChild(parent,\n                        ['label', { 'for': this._labelId }]),\n                    'text', label);\n        }\n    },\n\n    set label(label) {\n        this._label = label;\n        this._setLabel(label, '_labelNode', this._labelCell);\n    },\n\n    set suffix(suffix) {\n        this._suffix = suffix;\n        this._setLabel(suffix, '_suffixNode', this._cell);\n    },\n\n    set options(options) {\n        this._options = options;\n        var setOptions = this._meta.setOptions;\n        if (setOptions)\n            setOptions.call(this);\n    },\n\n    set visible(visible) {\n        // NOTE: Only set the visibility of the whole row if this is a row item,\n        // in which case this._cell is not defined.\n        Element.toggleClass(this._cell || this._row, 'hidden', !visible);\n        Element.toggleClass(this._labelCell, 'hidden', !visible);\n        var setVisible = this._meta.setVisible;\n        if (setVisible)\n            setVisible.call(this, visible);\n        this._visible = !!visible;\n    },\n\n    _setEnabled: function(enabled, _fromParent) {\n        if (!enabled ^ this._enabled) \n            return;\n        if (_fromParent) {\n            // When called from the parent component, we have to remember the\n            // component's previous enabled state when disabling the palette,\n            // so we can restore it when enabling the palette again.\n            var prev = pick(this._previousEnabled, this._enabled);\n            this._previousEnabled = enabled ? undefined : prev; // clear\n            enabled = enabled && prev;\n        }\n        Element.toggleClass(this._cell || this._row, 'disabled', !enabled);\n        if (this._components) {\n            for (var i in this._components)\n                this._components[i]._setEnabled(enabled, true);\n        } else {\n            Element.set(this._element, 'disabled', !enabled);\n            var setEnabled = this._meta.setEnabled;\n            if (setEnabled)\n                setEnabled.call(this, enabled);\n        }\n        this._enabled = !!enabled;\n    },\n\n    set enabled(enabled) {\n        this._setEnabled(enabled);\n    },\n\n    get range() {\n        return [this._min, this._max];\n    },\n\n    set range(range) {\n        this.min = range ? range[0] : null;\n        this.max = range ? range[1] : null;\n    },\n\n    reset: function() {\n        if (this._components) {\n            for (var i in this._components)\n                this._components[i].reset();\n        } else {\n            this.value = this._defaultValue;\n        }\n    },\n\n    toString: function() {\n        return 'Component ' + this._name || '@' + this._id;\n    }\n}),\neach(['min', 'max', 'step', 'rows', 'readonly', 'placeholder'],\n    // Inject getters and setters for all properties that simply redirect to the\n    // underlying HTML element.\n    function(key) {\n        var name = '_' + key;\n        define(this, key, {\n            enumerable: true,\n            configurable: true,\n            get: function() {\n                return this[name];\n            },\n            set: function(value) {\n                this[name] = value;\n                Element.set(this._element, key, value);\n            }\n        });\n    }, {})\n);\n\nreturn Palette;\n}();\n"],
  "mappings": "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",
  "names": ["key", "Palette", "component", "value"]
}
